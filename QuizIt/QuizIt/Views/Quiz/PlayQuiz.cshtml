@model QuizIt.Models.ViewModels.QuizQuestionsVm

<div class="container-quiz">

    <img class="img-responsive" src="~/images/Quizit-empty.svg" />
    <div class="text-block-title">
        <h4>@Model.Quiz.Name</h4>
    </div>

    <div class="text-block text-block-login text-block-quiz">

        @{
            int index = 1;
        }

        Skriv ditt namn <input type="text" id="userInput" style="color:black" />
        <hr />


        @foreach (var question in Model.Questions)
        {
            <p>Fråga @index :</p>
            <p>@question.TrackQuestion</p>
            index++;

            if (User.Identity.IsAuthenticated) //Man måste vara inloggad för att se mer än bara frågorna
            {
                if (User.IsInRole("Quizleader") || User.IsInRole("Admin"))
                {
                    <iframe src=@string.Format("https://open.spotify.com/embed/track/" + question.TrackId) width="300" height="80" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>
                    <p>Svar: @question.Answer</p>
                    <button onclick="nextQuestion()">Nästa fråga</button>

                }
                else
                {

                    @*string result = "result" + index;

                    <div id='@result' style="color:hotpink"> </div>
                    <br />
                    string name = User.Identity.Name;
                    <button onclick="printName('@User.Identity.Name','@result')">@User.Identity.Name kan svaret!!</button>

                    //Prata med servern (den nya controllern); jag har svaret
                    <button onclick="playerHasAnswered('@User.Identity.Name')">Jag kan svaret!!</button>*@

                }

                <div>
                    <input type="button" class="sendButton" value="Jag kan svaret!!" style="color:black" />
                </div>

                <div>
                    <ul id="messagesList"></ul>
                </div>

            }
            <hr />
        }


    </div>
</div>


<script>

    //set interval, anropa metod CurrentQuizStatus många gånger, fetch som loggar, jmf quizledare/tävlande vy
    //setInterval(getCurrentQuizStatus, 500);

    async function playerHasAnswered(userName) {

        console.log(userName);

        let response = await fetch("/quiz/playerhasanswered/?userName=" + userName,
            {
                method: "GET"
            });

        let message;

        console.log(response.status);

        if (response.status === 200) {
            message = await response.json();
        }

        console.log(response);
        console.log(message);
    }

    async function nextQuestion() {
        let response = await fetch("/quiz/nextquestion",
            {
                method: "GET"
            });

        let currentQuestion;

        if (response.status === 200) {
            currentQuestion = response.json();
            console.log('Fråga nr: ' + currentQuestion)
        }
    }


    async function getCurrentQuizStatus() {

        let response = await fetch("/quiz/currentquizstatus",
            {
                method: "GET"
            });

        let questionId = 0;

        if (response.status === 200) {
            questionId = await response.json();
        }

        console.log(response);
        console.log(questionId);
    }



    async function printName(name, resultIndex) {

        console.log(name);
        console.log(resultIndex);

        var today = new Date();
        var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds() + ":" + today.getMilliseconds();

        let result = document.getElementById(resultIndex);
        result.innerHTML = 'Stopp!! ' + name + ' tryckte på knappen kl ' + time + ' !';

    }
</script>